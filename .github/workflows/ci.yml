name: Build-Pack-Publish

on:
  push:
    branches: [main]
  workflow_dispatch: {}

# Principle of least privilege: default to read-only; elevate per job as needed
permissions:
  contents: read

jobs:
  build-and-pack:
    name: üèóÔ∏è Build and Pack
    permissions:
      contents: read
    runs-on: ubuntu-latest
    outputs:
      git-version: ${{ steps.gitversion.outputs.GitVersion }}
      build_summary: ${{ steps.build_summary.outputs.build_summary }}
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_NOLOGO: true
      DOTNET_SDK_VERSION: "10.0.x" # Use latest 10.x SDK to get McpServer type target support

    steps:
      - name: ‚úîÔ∏è Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üß∞ Setup .NET 9.x SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}
          dotnet-quality: "preview"

      - name: ‚ôªÔ∏è Restore
        run: dotnet restore

      - name: üèóÔ∏è Build (Release)
        run: dotnet build --configuration Release --no-restore /p:ContinuousIntegrationBuild=true

      - name: üì¶ Pack NuGet package (no rebuild)
        run: dotnet pack --configuration Release -p:ContinuousIntegrationBuild=true --no-build -o ./artifacts /bl

      # Extract the calculated Git/Nerdbank version used for the package and expose it
      - name: üî¢ Determine GitVersion
        id: gitversion
        shell: bash
        run: |
          ver=$(nbgv get-version -v NuGetPackageVersion)
          echo "GitVersion=$ver" >> "$GITHUB_OUTPUT"
          echo "GitVersion=$ver" >> "$GITHUB_ENV"
          echo "Determined GitVersion: $ver"

      - name: üîê Get certificate
        id: cert_file
        uses: timheuer/base64-to-file@v1
        with:
          fileName: "certfile.pfx"
          encodedString: ${{ secrets.SIGNING_CERT }}

      - name: ‚úçÔ∏è Sign NuGet Package
        run: dotnet nuget sign artifacts/*.nupkg --certificate-path ${{ steps.cert_file.outputs.filePath }} --certificate-password ${{ secrets.CERT_PWD }} --timestamper http://timestamp.digicert.com

      - name: üßπ Remove certificate file
        if: always()
        shell: bash
        run: |
          set -e
          rm -f "${{ steps.cert_file.outputs.filePath }}" || true
          echo "Certificate file removed."

      - name: ‚¨ÜÔ∏è Upload signed package artifact
        uses: actions/upload-artifact@v4
        with:
          name: signed-nuget-package-${{ steps.gitversion.outputs.GitVersion }}
          path: artifacts/*.nupkg
          if-no-files-found: error
          retention-days: 7

      - name: ‚¨ÜÔ∏è Upload binlog artifact
        uses: actions/upload-artifact@v4
        with:
          name: binlog-${{ steps.gitversion.outputs.GitVersion }}
          path: ./*.binlog
          if-no-files-found: error
          retention-days: 7

      - name: ‚¨ÜÔ∏è Upload server.json artifact
        uses: actions/upload-artifact@v4
        with:
          name: server-json-${{ steps.gitversion.outputs.GitVersion }}
          path: ./obj/Release/net9.0/nb.gv/server.json
          if-no-files-found: error
          retention-days: 7

      - name: üìÉ Set build summary output
        id: build_summary
        shell: bash
        run: |
          pkg=$(ls artifacts/*.nupkg 2>/dev/null | head -n1 || true)
          echo "build_summary<<EOF" >> "$GITHUB_OUTPUT"
          echo "## üèóÔ∏è Build Summary" >> "$GITHUB_OUTPUT"
          echo "* SDK Version: $(dotnet --version)" >> "$GITHUB_OUTPUT"
          echo "* Package Version: ${{ steps.gitversion.outputs.GitVersion }}" >> "$GITHUB_OUTPUT"
          if [ -n "$pkg" ]; then
            echo "* Final Package File: $(basename "$pkg")" >> "$GITHUB_OUTPUT"
          else
            echo "* Final Package File: (none found)" >> "$GITHUB_OUTPUT"
          fi
          echo "EOF" >> "$GITHUB_OUTPUT"

  publish-to-nuget:
    name: üì¶ Publish to NuGet
    runs-on: ubuntu-latest
    if: ${{ ! contains(github.event.head_commit.message, '[skip publish]') }}
    needs: build-and-pack
    outputs:
      git-version: ${{ env.GIT_VERSION }}
      nuget_summary: ${{ steps.nuget_summary.outputs.nuget_summary }}
    # Needs OIDC for temp API key, read for repo
    permissions:
      contents: read
      id-token: write
    env:
      GIT_VERSION: ${{ needs.build-and-pack.outputs.git-version }}
      PACKAGE_ID: "TimHeuer.SampleDotnetMcpServer"
      NUGET_POLL_TIMEOUT: 600
      NUGET_POLL_INTERVAL: 20
    steps:
      - name: ‚úîÔ∏è Checkout
        uses: actions/checkout@v4
      - name: Show received GitVersion
        run: |
          echo "GitVersion from build: ${{ env.GIT_VERSION }}"
      - name: ‚¨áÔ∏è Download signed package artifact
        uses: actions/download-artifact@v4
        with:
          name: signed-nuget-package-${{ env.GIT_VERSION }}
          path: ./signed-artifacts

      # Get a short-lived NuGet API key
      - name: üîë NuGet login (OIDC ‚Üí temp API key)
        uses: NuGet/login@v1
        id: login
        with:
          user: ${{secrets.NUGET_USER}}

      - name: üëá Push to NuGet
        run: dotnet nuget push signed-artifacts/*.nupkg --api-key ${{ steps.login.outputs.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate

      # Wait for the package metadata to be available on NuGet else MCP publish will fail
      - name: ‚è≥ Poll NuGet for package availability
        shell: pwsh
        run: |
          $version = "$env:GIT_VERSION"
          $packageId = "$env:PACKAGE_ID"
          $url = "https://api.nuget.org/v3-flatcontainer/$packageId/$version/readme"
          $packageUrl = "https://www.nuget.org/packages/$packageId/$version"
          $timeout = $env:NUGET_POLL_TIMEOUT
          $interval = $env:NUGET_POLL_INTERVAL
          $elapsed = 0
          Write-Host "Checking for package readme availability at $url"
          while ($elapsed -lt $timeout) {
            try {
              $response = Invoke-WebRequest -Uri $url -UseBasicParsing -ErrorAction Stop
              if ($response.StatusCode -eq 200) {
                Write-Host "Package readme is available!"
                Write-Host "::notice title=NuGet Package Published::$packageUrl"
                break
              }
            } catch {
              Write-Host "Readme not available yet. Waiting $interval seconds..."
            }
            Start-Sleep -Seconds $interval
            $elapsed += $interval
          }
          if ($elapsed -ge $timeout) {
            Write-Error "Timeout waiting for package readme availability."
            exit 1
          }

      - name: üìÉ Set NuGet summary output
        id: nuget_summary
        shell: bash
        run: |
          echo "nuget_summary<<EOF" >> "$GITHUB_OUTPUT"
          echo "## üì¶ NuGet Publish" >> "$GITHUB_OUTPUT"
          echo "* Package ID: $PACKAGE_ID" >> "$GITHUB_OUTPUT"
          echo "* Version: $GIT_VERSION" >> "$GITHUB_OUTPUT"
          echo "* Package URL: https://www.nuget.org/packages/$PACKAGE_ID/$GIT_VERSION" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

  publish-to-mcp:
    name: ¬ÆÔ∏è Publish to MCP Registry
    runs-on: ubuntu-latest
    if: ${{ ! contains(github.event.head_commit.message, '[skip publish]') }}
    needs: publish-to-nuget
    permissions:
      contents: read
      id-token: write
    env:
      GIT_VERSION: ${{ needs.publish-to-nuget.outputs.git-version }}
    steps:
      - name: ‚úîÔ∏è Checkout
        uses: actions/checkout@v4

      - name: ‚¨áÔ∏è Download server.json artifact
        uses: actions/download-artifact@v4
        with:
          name: server-json-${{ env.GIT_VERSION }}
          path: .mcp

      - name: üî¢ Show GitVersion propagated to this job
        run: |
          echo "GitVersion from build (env): $GIT_VERSION"

      - name: üß∞ Install MCP Publisher
        run: |
          # Build publisher from source (requires Go)
          git clone https://github.com/modelcontextprotocol/registry publisher-repo
          cd publisher-repo
          make publisher
          cp bin/mcp-publisher ../mcp-publisher
          cd ..
          chmod +x mcp-publisher

      - name: üîë Login to MCP Registry
        run: ./mcp-publisher login github-oidc

      - name: ¬ÆÔ∏è Publish to MCP Registry
        id: publish_mcp
        shell: pwsh
        run: |
          Write-Host "Invoking MCP publisher..."
          $lines = & ./mcp-publisher publish .mcp/server.json 2>&1 | Tee-Object -Variable allOutput
          # Ensure all output is echoed
          $allOutput | ForEach-Object { Write-Host $_ }
          $serverId = $null
          foreach ($l in $allOutput) {
            if ($l -match 'Server Id ([0-9a-fA-F-]{36})') {
              $serverId = $Matches[1]
              break
            }
          }
          if ($serverId) {
            $url = "https://registry.modelcontextprotocol.io/v0/servers/$serverId"
            Write-Host "Captured Server Id: $serverId"
            Write-Host "MCP Server Registry URL: $url"
            # Emit GitHub step outputs
            echo "MCP_SERVER_ID=$serverId" >> $env:GITHUB_ENV
            echo "MCP_SERVER_URL=$url" >> $env:GITHUB_ENV
            echo "server-id=$serverId" >> $env:GITHUB_OUTPUT
            echo "server-url=$url" >> $env:GITHUB_OUTPUT
            Write-Host "::notice title=MCP Server Registered::$url"
          } else {
            Write-Error "Server Id not found in publisher output. Failing job."; exit 1
          }

      - name: üìÉ Set MCP summary output
        id: mcp_summary
        shell: bash
        run: |
          echo "mcp_summary<<EOF" >> "$GITHUB_OUTPUT"
          echo "## ¬ÆÔ∏è MCP Registry Publish" >> "$GITHUB_OUTPUT"
          echo "* MCP Server Version: $GIT_VERSION" >> "$GITHUB_OUTPUT"
          echo "* MCP Server ID: $MCP_SERVER_ID" >> "$GITHUB_OUTPUT"
          if [ -n "$MCP_SERVER_URL" ]; then
            echo "* MCP Server URL: $MCP_SERVER_URL" >> "$GITHUB_OUTPUT"
          fi
          echo "EOF" >> "$GITHUB_OUTPUT"

    outputs:
      mcp_summary: ${{ steps.mcp_summary.outputs.mcp_summary }}

  aggregate-summary:
    name: üìã Workflow Summary
    runs-on: ubuntu-latest
    needs: [build-and-pack, publish-to-nuget, publish-to-mcp]
    permissions:
      contents: read
    steps:
      - name: Combine job outputs into workflow summary
        shell: bash
        run: |
          echo "# üìã Workflow Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "${{ needs.build-and-pack.outputs.build_summary }}" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "${{ needs.publish-to-nuget.outputs.nuget_summary }}" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "${{ needs.publish-to-mcp.outputs.mcp_summary }}" >> "$GITHUB_STEP_SUMMARY"
