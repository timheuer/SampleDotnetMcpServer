name: Build-Pack-Publish

on:
  push:
    branches: [main]

permissions:
  contents: write
  id-token: write

jobs:
  build-and-pack:
    name: Build and Pack
    runs-on: ubuntu-latest
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_NOLOGO: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 9.x SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: Restore
        run: dotnet restore

      - name: Build (Release)
        run: dotnet build --configuration Release --no-restore /p:ContinuousIntegrationBuild=true

      - name: Pack NuGet package
        run: dotnet pack --configuration Release --no-build -p:ContinuousIntegrationBuild=true -o ./artifacts

      - name: Upload server.json artifact
        uses: actions/upload-artifact@v4
        with:
          name: server-json
          path: .mcp/server.json
          if-no-files-found: error

      - name: 🔐 Get certificate
        id: cert_file
        uses: timheuer/base64-to-file@v1
        with:
          fileName: "certfile.pfx"
          encodedString: ${{ secrets.SIGNING_CERT }}

      - name: ✍️ Sign NuGet Package
        run: dotnet nuget sign artifacts/*.nupkg --certificate-path ${{ steps.cert_file.outputs.filePath }} --certificate-password ${{ secrets.CERT_PWD }} --timestamper http://timestamp.digicert.com

      - name: Upload signed package artifact
        uses: actions/upload-artifact@v4
        with:
          name: signed-nuget-package
          path: artifacts/*.nupkg
          if-no-files-found: error

  publish-to-nuget:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: build-and-pack
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download signed package artifact
        uses: actions/download-artifact@v4
        with:
          name: signed-nuget-package
          path: ./signed-artifacts

      # Get a short-lived NuGet API key
      - name: NuGet login (OIDC → temp API key)
        uses: NuGet/login@v1
        id: login
        with:
          user: ${{secrets.NUGET_USER}}

      - name: 👇 Push to NuGet
        run: dotnet nuget push signed-artifacts/*.nupkg --api-key ${{ steps.login.outputs.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate

      - name: Download server.json artifact
        uses: actions/download-artifact@v4
        with:
          name: server-json
          path: .mcp

      # Wait for the package metadata to be available on NuGet else MCP publish will fail
      - name: Poll NuGet for package availability
        shell: pwsh
        run: |
          $serverJson = Get-Content ".mcp/server.json" | Out-String | ConvertFrom-Json
          $version = $serverJson.packages[0].version.ToLower()
          $packageId = $serverJson.packages[0].identifier.ToLower()
          $url = "https://api.nuget.org/v3-flatcontainer/$packageId/$version/readme"
          $timeout = 600
          $interval = 20
          $elapsed = 0
          Write-Host "Checking for package readme availability at $url"
          while ($elapsed -lt $timeout) {
            try {
              $response = Invoke-WebRequest -Uri $url -UseBasicParsing -ErrorAction Stop
              if ($response.StatusCode -eq 200) {
                Write-Host "Package readme is available!"
                break
              }
            } catch {
              Write-Host "Readme not available yet. Waiting $interval seconds..."
            }
            Start-Sleep -Seconds $interval
            $elapsed += $interval
          }
          if ($elapsed -ge $timeout) {
            Write-Error "Timeout waiting for package readme availability."
            exit 1
          }

  publish-to-mcp:
    name: Publish to MCP Registry
    runs-on: ubuntu-latest
    needs: publish-to-nuget
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download server.json artifact
        uses: actions/download-artifact@v4
        with:
          name: server-json
          path: .mcp

      - name: Emit server.json and log versions
        shell: pwsh
        run: |
          Write-Host "--- .mcp/server.json version contents ---"
          $serverJson = Get-Content ".mcp/server.json" | Out-String | ConvertFrom-Json
          Write-Host "[MCP] packages[0].version: $($serverJson.packages[0].version)"
          Write-Host "[MCP] version_detail.version: $($serverJson.version_detail.version)"

      - name: Install MCP Publisher
        run: |
          # Build publisher from source (requires Go)
          git clone https://github.com/modelcontextprotocol/registry publisher-repo
          cd publisher-repo
          make publisher
          cp bin/mcp-publisher ../mcp-publisher
          cd ..
          chmod +x mcp-publisher

      - name: Login to MCP Registry
        run: ./mcp-publisher login github-oidc

      - name: Publish to MCP Registry
        id: publish_mcp
        shell: pwsh
        run: |
          Write-Host "Invoking MCP publisher..."
          $lines = & ./mcp-publisher publish .mcp/server.json 2>&1 | Tee-Object -Variable allOutput
          # Ensure all output is echoed
          $allOutput | ForEach-Object { Write-Host $_ }
          $serverId = $null
          foreach ($l in $allOutput) {
            if ($l -match 'Server Id ([0-9a-fA-F-]{36})') {
              $serverId = $Matches[1]
              break
            }
          }
          if ($serverId) {
            $url = "https://registry.modelcontextprotocol.io/v0/servers/$serverId"
            Write-Host "Captured Server Id: $serverId"
            Write-Host "MCP Server Registry URL: $url"
            # Emit GitHub step outputs
            echo "MCP_SERVER_ID=$serverId" >> $env:GITHUB_ENV
            echo "MCP_SERVER_URL=$url" >> $env:GITHUB_ENV
            echo "server-id=$serverId" >> $env:GITHUB_OUTPUT
            echo "server-url=$url" >> $env:GITHUB_OUTPUT
            Write-Host "::notice title=MCP Server Registered::$url"
          } else {
            Write-Warning "Server Id not found in publisher output."
          }
